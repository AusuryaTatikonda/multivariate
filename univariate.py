# -*- coding: utf-8 -*-
"""univariate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UjQ2i2_5o31tEYlY_NOMP-kxuMVP7q1p
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
a=pd.read_csv("/content/Company_data.csv")

a.head()

a.tail()

a.shape

a.describe()

a.isnull()

a.isnull().sum()

a.describe().loc['mean'].plot.bar()
plt.show()

b=a.corr()
sns.heatmap(b,annot=True)

"""here we observed that tv has the highest positive correlation"""

y=a.iloc[:,-1]
print(y)

X=a.iloc[:,:1]
print(X)

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.30,random_state=0)

X_train.shape, X_test.shape

y_test.shape,X_test.shape

X_train=X_train.values.reshape(-1,1)
y_train=y_train.values.reshape(-1,1)

X_test.shape,X_train.shape

from sklearn import linear_model
reg = linear_model.LinearRegression()
reg.fit(X_train,y_train)

from sklearn.metrics import mean_absolute_error,r2_score,mean_squared_error
y_pred = reg.predict(X_train)

print(f'MAE = {mean_absolute_error(y_train, y_pred)}')
print(f'MSE = {mean_squared_error(y_train, y_pred)}')
print(f'RMSE = {np.sqrt(mean_squared_error(y_train, y_pred))}')
print(f'R_2 = {r2_score(y_train, y_pred)}')

y_pred = reg.predict(X_test)

print(f'MAE = {mean_absolute_error(y_test, y_pred)}')
print(f'MSE = {mean_squared_error(y_test, y_pred)}')
print(f'RMSE = {np.sqrt(mean_squared_error(y_test, y_pred))}')
print(f'R_2 = {r2_score(y_test, y_pred)}')

reg.score(X_test,y_test)

from sklearn.linear_model import Lasso
reg = Lasso(alpha = 0.1)
reg.fit(X_train,y_train)

y_pred1 = reg.predict(X_train)
print(f'Performance of the model on training data :\n')
print(f'MAE = {mean_absolute_error(y_train, y_pred1)}')
print(f'MSE = {mean_squared_error(y_train, y_pred1)}')
print(f'RMSE = {np.sqrt(mean_squared_error(y_train, y_pred1))}')
print(f'R_2 = {r2_score(y_train, y_pred1)}')

y_pred2 = reg.predict(X_test)
print(f'Performance of the model on test data :\n')
print(f'MAE = {mean_absolute_error(y_test, y_pred2)}')
print(f'MSE = {mean_squared_error(y_test, y_pred2)}')
print(f'RMSE = {np.sqrt(mean_squared_error(y_test, y_pred2))}')
print(f'R_2 = {r2_score(y_test, y_pred2)}')

from sklearn.linear_model import Ridge
reg = Ridge(alpha = 0.1)
reg.fit(X_train, y_train)

y_pred1 = reg.predict(X_train)
print(f'Performance of the model on training data :\n')
print(f'MAE = {mean_absolute_error(y_train, y_pred1)}')
print(f'MSE = {mean_squared_error(y_train, y_pred1)}')
print(f'RMSE = {np.sqrt(mean_squared_error(y_train, y_pred1))}')
print(f'R_2 = {r2_score(y_train, y_pred1)}')

y_pred2 = reg.predict(X_test)
print(f'Performance of the model on test data :\n')
print(f'MAE = {mean_absolute_error(y_test, y_pred2)}')
print(f'MSE = {mean_squared_error(y_test, y_pred2)}')
print(f'RMSE = {np.sqrt(mean_squared_error(y_test, y_pred2))}')
print(f'R_2 = {r2_score(y_test, y_pred2)}')

from sklearn.linear_model import Lasso
reg = Lasso(alpha = 0.5)
reg.fit(X_train,y_train)

y_pred2 = reg.predict(X_test)
print(f'Performance of the model on test data :\n')
print(f'MAE = {mean_absolute_error(y_test, y_pred2)}')
print(f'MSE = {mean_squared_error(y_test, y_pred2)}')
print(f'RMSE = {np.sqrt(mean_squared_error(y_test, y_pred2))}')
print(f'R_2 = {r2_score(y_test, y_pred2)}')

"""In lasso ,after increasing the alpha value we tend to see  slight changes in the values of MAE,MSE,RMSE,R_2 where R_2 value decreases and remaining values increases a bit."""

from sklearn.linear_model import Ridge
reg = Ridge(alpha = 0.5)
reg.fit(X_train, y_train)

y_pred2 = reg.predict(X_test)
print(f'Performance of the model on test data :\n')
print(f'MAE = {mean_absolute_error(y_test, y_pred2)}')
print(f'MSE = {mean_squared_error(y_test, y_pred2)}')
print(f'RMSE = {np.sqrt(mean_squared_error(y_test, y_pred2))}')
print(f'R_2 = {r2_score(y_test, y_pred2)}')

"""In ridge ,after increasing the alpha value we tend to see  slight changes in the values of MAE,MSE,RMSE,R_2 where R_2 value decreases and remaining values increases a bit."""

reg.score(X_test,y_test)